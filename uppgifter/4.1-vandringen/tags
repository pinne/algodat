!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FIRST	queue.h	/^} *FIRST, *LAST;$/;"	v	typeref:struct:queue
LAST	queue.h	/^} *FIRST, *LAST;$/;"	v	typeref:struct:queue
MAXTREEDEPTH	main.c	9;"	d	file:
MINMOVE	main.c	/^int MINMOVE = INT_MAX;$/;"	v
NDEBUG	main.c	8;"	d	file:
NDEBUG	queue.c	3;"	d	file:
STEP_E	main.c	/^int STEP_E;$/;"	v
STEP_N	main.c	/^int STEP_N;$/;"	v
STEP_S	main.c	/^int STEP_S;$/;"	v
STEP_W	main.c	/^int STEP_W;$/;"	v
TARGET_X	main.c	/^int TARGET_X;$/;"	v
TARGET_Y	main.c	/^int TARGET_Y;$/;"	v
VISITED	main.c	/^int VISITED[100 * 4][100 * 4];$/;"	v
breadcrumb	main.c	/^void breadcrumb(struct queue *node)$/;"	f
clear_children	tree.c	/^void clear_children(struct tree *node)$/;"	f
clear_queue	main.c	/^void clear_queue(void)$/;"	f
create_tree	tree.c	/^void create_tree(struct tree *node, int depth)$/;"	f
dequeue	queue.c	/^struct queue *dequeue()$/;"	f
down	tree.h	/^	struct tree *down;$/;"	m	struct:tree	typeref:struct:tree::tree
enqueue	queue.c	/^void enqueue(struct queue *element)$/;"	f
init_queue	queue.c	/^void init_queue(void)$/;"	f
left	tree.h	/^	struct tree *left;$/;"	m	struct:tree	typeref:struct:tree::tree
level	queue.h	/^	int level;$/;"	m	struct:queue
level	tree.h	/^	int level;$/;"	m	struct:tree
main	main.c	/^int main(int argc, char *argv[])$/;"	f
next	queue.h	/^	struct queue *next;$/;"	m	struct:queue	typeref:struct:queue::queue
parent	tree.h	/^	struct tree *parent;$/;"	m	struct:tree	typeref:struct:tree::tree
prev	queue.h	/^	struct queue *prev;$/;"	m	struct:queue	typeref:struct:queue::queue
print_element	queue.c	/^void print_element(struct queue *q)$/;"	f
print_node	tree.c	/^void print_node(struct tree *node)$/;"	f
print_queue	queue.c	/^void print_queue()$/;"	f
queue	queue.h	/^struct queue {$/;"	s
queue_len	queue.c	/^int queue_len(void)$/;"	f
reset_VISITED	main.c	/^void reset_VISITED(void)$/;"	f
right	tree.h	/^	struct tree *right;$/;"	m	struct:tree	typeref:struct:tree::tree
spawn_child	tree.c	/^struct tree *spawn_child(struct tree *node, struct tree *leaf)$/;"	f
test_node	main.c	/^int test_node(struct queue *node)$/;"	f
traverse_inorder	tree.c	/^void traverse_inorder(struct tree *node)$/;"	f
traverse_postorder	tree.c	/^void traverse_postorder(struct tree *node)$/;"	f
traverse_preorder	tree.c	/^void traverse_preorder(struct tree *node)$/;"	f
tree	tree.h	/^struct tree {$/;"	s
up	tree.h	/^	struct tree *up;$/;"	m	struct:tree	typeref:struct:tree::tree
vandringen	main.c	/^void vandringen(int start_x, int start_y)$/;"	f
x	queue.h	/^	int x;$/;"	m	struct:queue
x	tree.h	/^	int x;$/;"	m	struct:tree
y	queue.h	/^	int y;$/;"	m	struct:queue
y	tree.h	/^	int y;$/;"	m	struct:tree
